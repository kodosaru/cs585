// OpenCVWebcam.cpp : Defines the entry point for the console application.
//

#include "opencv2/core/core.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/objdetect/objdetect.hpp"
#include <string>
#include <vector>
#include <stdio.h>
#include <iostream>
#include <sys/stat.h>
#include <dirent.h>

using namespace cv;
using namespace std;

Mat view;
//Mat starImage;
string dataDir="/Users/donj/workspace/cs585/Lab3/Data/";
bool debug=false;

 //function to detect faces after normalizing the image
 void detectFaces( Mat& image, CascadeClassifier& cascade, vector<Rect>& faces );

 //functions to detect the largest red object in an image
 bool findLargestRedObject(Mat& view, Point& location, vector<Point>& outline, int redThreshold);

//function to track the red object
void trackRedObject(Mat& image, vector<Point>& track, int redThreshold);

//a dummy function to pass to the slider bar to threshold the red object
void onTrackbar(int value, void* data);

// Compute the area and center of a region bounded by an outline
void computeObjectAreaAndCenter(vector<Point>& outline, double& area, Point& center);

//Draw an outline stored in a vector of points
void drawOutline(Mat& image, vector<Point>& outline);

//Translate (move) an outline stored in a vector of points by adding an offset to 
//the coordinates of all points in the outline
void translateOutline(vector<Point>& outline, Point center);

//Scale an outline by multiplying all coordinates of all points in the outline by a constant
void scaleOutline(vector<Point>& outline, double scale);

bool FileExist( const string& Name );

int main(int argc, char* argv[])
{

    int redThreshold = 190;
    vector<Point> outline,drawing; //for the version that we are drawing (scaled and translated)
    Point outlineCenter;
    double outlineArea=0;
    
    // Empty results directory
    struct dirent *next_file;
    DIR *dir;
    char filepath[256];
    string folder;
    
    /* Empty results folder
    folder=dataDir+"results";
    dir=opendir(folder.c_str());
    while ( (next_file = readdir(dir)) )
    {
        // build the full path for each file in the folder
        sprintf(filepath, "%s/%s", folder.c_str(), next_file->d_name);
        if(!remove(filepath))
        {
            cout<<"Removed file "<<filepath<<endl;
        };
    }
    // Empty video folder
    folder=dataDir+"video";
    dir=opendir(folder.c_str());
    while ( (next_file = readdir(dir)) )
    {
        // build the full path for each file in the folder
        sprintf(filepath, "%s/%s", folder.c_str(), next_file->d_name);
        if(!remove(filepath))
        {
            cout<<"Removed file "<<filepath<<endl;
        };
    }*/

    
    // Create star outline
    
    string path = dataDir+"redStar.png";
    if(!FileExist(path)){
        cout << "File " << path << " does not exist" << endl;
        return 1;
    }
    Mat starImage = imread(path);
    Point starCenter;
    imwrite(dataDir+"test_view_before_bad.png", starImage);
    findLargestRedObject(starImage, starCenter, drawing, redThreshold);
    
    
    double scaleFactor = 1.0;
    Point2f translation(0,0);
    
    VideoCapture capture;
    char filename[256];
    capture.open(0);
    if(!capture.isOpened())
    {
        //int error = -1;
        return 1;
    }

   //Load face the cascades
   string face_cascade_name = "haarcascade_frontalface_alt.xml";
   CascadeClassifier face_cascade;
   if( !face_cascade.load( dataDir+face_cascade_name ) )
   {
       printf("--(!)Error loading\n"); return -1; 
   }

    //for tracking the ball
    //vector<Point> drawing; //to keep track of the original track
    //vector<Point> outline; //for the version that we are drawing (scaled and translated)
    double drawingArea;
    Point drawingCenter;
    bool bTracking = false;
    Mat view0;

    //for recording frames of video and results
    bool bRecordVideo = false;
    bool bRecordResults = false;
    int frameNumber=0;

    //create the window with a trackbar for the slider for the red threshold
    namedWindow( "Camera View", 1 );
    createTrackbar( "Red Threshold", "Camera View", &redThreshold, 255, onTrackbar );


    capture.read(view0);
    view0.copyTo(view);

    //bool blink = false;

    while( capture.isOpened() )
    {
        capture.read(view0);
        view0.copyTo(view);
        if(bRecordVideo)
        {
            sprintf(filename, "%svideo/video_%04d.jpg", dataDir.c_str(), frameNumber);
            imwrite(filename, view);
        }

        if(bTracking)
        {
            //We are currently tracking the red object, so draw the track so the user can see it
            trackRedObject(view, drawing, redThreshold);
            //draw the outline as drawn
            drawOutline(view, drawing);
        }
        else if(drawing.size() > 0)
        {
            //If we are not tracking, then detect the faces and draw the outline around the faces
            computeObjectAreaAndCenter(drawing, outlineArea, outlineCenter);
            
                std::vector<Rect> faces;
                detectFaces(view, face_cascade, faces);
                for(int F=0; F<faces.size(); F++)
                {
                    

                    //calculate the center of the faces returned by the face detector
                    Point faceCenter (faces[F].x+faces[F].width/2, faces[F].y + faces[F].height/2);

                    // copy the drawing into another vector so we can manipulate it
                    outline = drawing;

                    // Required: draw the user's drawing around the face
                    //Required: do some manipulations to scale and translate the shape
                    translation=faceCenter-outlineCenter;
                    translateOutline(outline, translation);
                    scaleFactor=pow(faces[F].width,2)/outlineArea;
                    scaleOutline(outline, scaleFactor);
                    
                    //draw the manipulated outline on the image
                    drawOutline(view, outline);

                }
        }


        if(bRecordResults)
        {
            sprintf(filename, "%sresults/results_%04d.jpg", dataDir.c_str(), frameNumber);
            imwrite(filename, view);
        }



        imshow("Camera View", view);
        char key = waitKey(33);
        if(key == 'q')
        {
            break;
        }
        if(key == 't')
        {
            bTracking = !bTracking;

            //We are starting our tracking, so clear out what was in there before
            if(bTracking) 
            {
                drawing.clear();
            }
            else //We are all done tracking, so do a little post-processing
            {
                //get basic information about the drawing that the user drew
                computeObjectAreaAndCenter(drawing, drawingArea, drawingCenter);
            }
        }
        if(key == 'v')
        {
            bRecordVideo = !bRecordVideo;
        }
        if(key == 'r')
        {
            bRecordResults = !bRecordResults;
        }
        if(key == ' ')
        {
            bRecordResults = !bRecordResults;
            bRecordVideo = bRecordResults;
        }

        if(bRecordResults || bRecordVideo)
        {
            frameNumber++;
        }
    }

    return 0;
}

void drawOutline(Mat& image, vector<Point>& outline)
{
    int numPoints = (int)outline.size()-1;
    for(int f=0; f<numPoints; f++)
    {
        line(image, outline[f], outline[f+1], Scalar(255, 0, 0), 3);
    }
}

void translateOutline(vector<Point>& outline, Point center)
{
    for(vector<Point>::iterator it = outline.begin(); it != outline.end(); ++it) {
        *it=*it+center;
    }
}

void scaleOutline(vector<Point>& outline, double scale)
{
    Point oldCenter,newCenter,deltaCenter;
    double area;
    computeObjectAreaAndCenter(outline, area, oldCenter);
    for(vector<Point>::iterator it = outline.begin(); it != outline.end(); ++it) {
        *it=*it*scale;
    }
    computeObjectAreaAndCenter(outline, area, newCenter);
    deltaCenter= oldCenter - newCenter;
    for(vector<Point>::iterator it = outline.begin(); it != outline.end(); ++it) {
        *it=*it+deltaCenter;
    }
}

void trackRedObject(Mat& view, vector<Point>& track, int redThreshold)
{
    //Added
    Point largestCenter;
    vector<Point> largestOutline;
    findLargestRedObject(view, largestCenter, largestOutline, redThreshold);
    cout<<"Center: ("<<largestCenter.x<<","<<largestCenter.y<<")"<<endl;
    track.push_back(largestCenter);
}

void computeObjectAreaAndCenter(vector<Point>& outline, double& area, Point& center)
{
    // http://docs.opencv.org/modules/imgproc/doc/structural_analysis_and_shape_descriptors.html
    Moments objectProperties;
    objectProperties = moments(outline, false);

    area = objectProperties.m00;
    center.x=(objectProperties.m10/area);
    center.y=(objectProperties.m01/area);
}

void detectFaces( Mat& image, CascadeClassifier& face_cascade, vector<Rect>& faces )
{

// http://docs.opencv.org/modules/objdetect/doc/cascade_classification.html
// http://docs.opencv.org/doc/tutorials/objdetect/cascade_classifier/cascade_classifier.html

    
    Mat frame_gray;
  cvtColor( image, frame_gray, CV_BGR2GRAY );
  equalizeHist( frame_gray, frame_gray );

  //imshow("gray image", frame_gray);
  //-- Detect faces
  face_cascade.detectMultiScale( frame_gray, faces, 1.1, 2, 0|CV_HAAR_SCALE_IMAGE, Size(30, 30) );
    cout<<"No. of faces: "<<faces.size()<<endl;
 }

bool findLargestRedObject(Mat& view, Point& location, vector<Point>& outline, int redThreshold)
{
    if(debug){
        imwrite(dataDir+"test_view_after_bad.png", view);
    }
    
    //allocate some images to store intermediate results
    vector<Mat> YCrCb;
    YCrCb.push_back(Mat(view.rows, view.cols, CV_8UC3));
    vector<Mat> justRed;
    justRed.push_back(Mat(view.rows, view.cols, CV_8UC1));
    vector<Mat> displayRed;
    displayRed.push_back(Mat(view.rows, view.cols, CV_8UC3));

    //Switch color spaces to YCrCb so we can detect red objects even if they are dark
    cvtColor(view, YCrCb[0], CV_BGR2YCrCb); 

    //Pull out just the red channel
    //int extractRed[6]={1,0, 1, 1, 1, 2};
    //mixChannels(&(YCrCb[0]), 1, &(justRed[0]), 1, extractRed, 1);
    
    int extractRed[6]={1,0, 1, 1, 1, 2};
    Mat foo;
    //justRed[0]=Mat::zeros(view.rows,view.cols,CV_8UC1);
    if(debug){
        imwrite(dataDir+"test_ycrcb_bad.png", YCrCb[0]);
        imwrite(dataDir+"test_justred_bad_before.png", justRed[0]);
    }
    mixChannels(&(YCrCb[0]), 1, &(justRed[0]), 1, extractRed, 1);
    if(debug){
        imwrite(dataDir+"test_justred_bad_after.png", justRed[0]);
    }


    // Threshold the red object (with the threshold from the slider)
    threshold(justRed[0], justRed[0], redThreshold, 255, CV_THRESH_BINARY);
    vector<vector<Point>> objectContours;
    vector<Vec4i> dummy;

    //Find all of the contiguous image regions
    findContours(justRed[0], objectContours, dummy, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE);

    //find the largest object
    int largestArea(-1), largestIndex(-1);
    Point largestCenter;
    for(int i=0; i<objectContours.size(); i++)
    {
        Point tempCenter;
        double tempArea;
        computeObjectAreaAndCenter(objectContours[i], tempArea, tempCenter);

        if(tempArea > largestArea)
        {
            largestArea = tempArea;
            largestIndex = i;
            largestCenter = tempCenter;
        }
    }
    location = largestCenter;
    if(largestIndex >= 0)
    {
        outline = objectContours[largestIndex];
    }

    //Construct an image for display that shows the red channel as gray
    mixChannels(&(YCrCb[0]), 1, &(displayRed[0]), 1, extractRed, 3);
    if(largestIndex >= 0)
    {
        //put a red circle around the red object
        circle(displayRed[0], largestCenter, std::min(double(view.cols)/2, sqrt(largestArea)), Scalar(0, 0, 255), 1);
    }
    if(debug)
    {
        imshow("Just Red", displayRed[0]);
    }

    if(largestIndex >= 0)
    {
        return true;
    }
    else
    {
        return false;
    }

}

void onTrackbar(int redThreshold, void* data)
{
    //Added
    Point largestCenter;
    vector<Point>* largestOutline = (vector<Point>*)(data);
    findLargestRedObject(view, largestCenter, *largestOutline, redThreshold);
}


bool FileExist( const string& Name )
{
#ifdef OS_WINDOWS
    struct _stat buf;
    int Result = _stat( Name.c_str(), &buf );
#else
    struct stat buf;
    int Result = stat( Name.c_str(), &buf );
#endif
    return Result == 0;
}
