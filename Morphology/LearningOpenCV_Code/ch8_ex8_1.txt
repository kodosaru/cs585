/* *************** License:**************************
   Oct. 3, 2008
   Right to use this code in any way you want without warrenty, support or any guarentee of it working.

   BOOK: It would be nice if you cited it:
   Learning OpenCV: Computer Vision with the OpenCV Library
     by Gary Bradski and Adrian Kaehler
     Published by O'Reilly Media, October 3, 2008
 
   AVAILABLE AT: 
     http://www.amazon.com/Learning-OpenCV-Computer-Vision-Library/dp/0596516134
     Or: http://oreilly.com/catalog/9780596516130/
     ISBN-10: 0596516134 or: ISBN-13: 978-0596516130    

   OTHER OPENCV SITES:
   * The source code is on sourceforge at:
     http://sourceforge.net/projects/opencvlibrary/
   * The OpenCV wiki page (As of Oct 1, 2008 this is down for changing over servers, but should come back):
     http://opencvlibrary.sourceforge.net/
   * An active user group is at:
     http://tech.groups.yahoo.com/group/OpenCV/
   * The minutes of weekly OpenCV development meetings are at:
     http://pr.willowgarage.com/wiki/OpenCV
   ************************************************** */


// Example 8-1. Internal organization of CvSeq sequence structure
 typedef struct CvSeq {
   int        flags;               // miscellaneous flags
   int        header_size;         // size of sequence header
   CvSeq*     h_prev;              // previous sequence
   CvSeq*     h_next;             //  next sequence
   CvSeq*     v_prev;             //  2nd previous sequence
   CvSeq*     v_next               // 2nd next sequence
   int        total;               // total number of elements
   int        elem_size;           // size of sequence element in byte
   char*      block_max;           // maximal bound of the last block
   char*      ptr;                 // current write pointer
   int        delta_elems;         // how many elements allocated
                                   // when the sequence grows
   CvMemStorage* storage;          // where the sequence is stored
   CvSeqBlock* free_blocks;        // free blocks list
   CvSeqBlock* first;              // pointer to the first sequence block
 }

